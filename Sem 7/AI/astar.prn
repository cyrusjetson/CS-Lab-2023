Script started on Thu 15 Sep 2022 09:21:36 AM IST

[19bcs150@mepcolinux CI]$cat astar.py

from collections import deque
from collections import defaultdict

class Graph:

    def __init__(self):
        self.adjacency_list = defaultdict(list)

    def get_neighbors(self, v):
        return self.adjacency_list[v]

    def add_edge(self,u,v,c):
      value = (v,c)
      self.adjacency_list[u].append(value)
      value = (u,c)
      self.adjacency_list[v].append(value)


    def h(self, n):

        H = {
        'A': 10,
        'B': 8,
        'C': 5,
        'D': 7,
        'E': 3,
        'F': 6,
        'G': 5,
        'H': 3,
        'I': 1,
        'J': 0
      }

        return H[n]


    def a_star_algorithm(self, start_node, stop_node):

        open_list = set([start_node])
        closed_list = set([])

        g = {}

        g[start_node] = 0

        parents = {}
        parents[start_node] = start_node

        while len(open_list) > 0:
            n = None

            for v in open_list:
                if n == None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v;

            if n == None:
                print('Path does not exist!')
                return None

            if n == stop_node:
                reconst_path = []

                while parents[n] != n:
                    reconst_path.append(n)
                    n = parents[n]

                reconst_path.append(start_node)

                reconst_path.reverse()

                print('Path found: {}'.format(reconst_path))
                return reconst_path


            for (m, weight) in self.get_neighbors(n):

                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                        #w = weight


                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        #w = weight

                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)

            open_list.remove(n)
            closed_list.add(n)
            #print(w)

        print('Path does not exist!')
        return None


g = Graph()

def func(g,path):
        total_cost=0
        for i in range(len(path)-1):
                src = path[i]
                dst = path[i+1]
                adj = g.get_neighbors(src)
                for each in adj:
                        if each[0] == dst:
                                total_cost += each[1]

        print("Cost: ",total_cost)



n = int(input("Enter no.of edges: "))
for i in range(n):
        u,v = input(f"Enter edge {i+1}:").split(" ")
        c = int(input(f"Enter cost for edge {i+1}:"))
        g.add_edge(u,v,c)


print(g.adjacency_list)

start_node = input("Enter start node:")
stop_node = input("Enter stop node:")

path = g.a_star_algorithm(start_node,stop_node)

func(g,path)


[19bcs150@mepcolinux CI]$python astar.py

Enter no.of edges: 14

Enter edge 1:A B
Enter cost for edge 1:6
Enter edge 2:B C
Enter cost for edge 2:3
Enter edge 3:C D
Enter cost for edge 3:1
Enter edge 4:B D
Enter cost for edge 4:2
Enter edge 5:C E
Enter cost for edge 5:5
Enter edge 6:E D
Enter cost for edge 6:8
Enter edge 7:E I
Enter cost for edge 7:5
Enter edge 8:E J
Enter cost for edge 8:5
Enter edge 9:J I
Enter cost for edge 9:3
Enter edge 10:I H
Enter cost for edge 10:2
Enter edge 11:G I
Enter cost for edge 11:3
Enter edge 12:G F
Enter cost for edge 12:1
Enter edge 13:F H
Enter cost for edge 13:7
Enter edge 14:A F
Enter cost for edge 14:3

defaultdict(<class 'list'>, {'A': [('B', 6), ('F', 3)], 
'B': [('A', 6), ('C', 3), ('D', 2)], 'C': [('B', 3), 
('D', 1), ('E', 5)], 'D': [('C', 1), ('B', 2), ('E', 8)],
 'E': [('C', 5), ('D', 8), ('I', 5), ('J', 5)], 
'I': [('E', 5), ('J', 3), ('H', 2), ('G', 3)], 
'J': [('E', 5), ('I', 3)], 'H': [('I', 2), ('F', 7)],
 'G': [('I', 3), ('F', 1)], 'F': [('G', 1), ('H', 7), ('A', 3)]})

Enter start node:A
Enter stop node:J

Path found: ['A', 'F', 'G', 'I', 'J']
Cost:  10

[19bcs150@mepcolinux CI]$exit
exit

Script done on Thu 15 Sep 2022 09:21:38 AM IST
