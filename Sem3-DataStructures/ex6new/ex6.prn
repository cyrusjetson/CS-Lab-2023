Script started on Mon 22 Feb 2021 03:20:52 PM IST
[19bcs150@mepcolinux ex6new]$cat head.h
#include<iostream>
#include<string.h>
#include<stdlib.h>
using namespace std;
class Student
{
        string name;
        int rollNo;
        float cgpa;
  public:
    Student();
    Student(int,string,float);
    Student(const Student &);
    ~Student();
    void dispDetails();
    friend class BST;
    void operator=(Student);
};

class TreeNode
{
  Student* s;
  TreeNode *left;
  TreeNode *right;
  public:
    TreeNode();
    TreeNode(Student*,TreeNode*,TreeNode*);
    TreeNode (const TreeNode &);
    Student * getStudent(TreeNode *);
    friend class BST;
};

class BST
{
   TreeNode* root;
   public:
     BST();
     bool isEmpty();
     bool insert(TreeNode*,TreeNode*);
     TreeNode* getRoot();
     void preOrder(TreeNode*);
     void inOrder(TreeNode*);
     void postOrder(TreeNode*);
     TreeNode* search(TreeNode*,int);
     TreeNode* findMin(TreeNode*);
     TreeNode* findMax(TreeNode*);
     Student* deletecgpa(int);
};

[19bcs150@mepcolinux ex6new]$cat imp.cpp
#include"head.h"
Student::Student()
{
  name = "Null";
  rollNo = 0;
  cgpa = 0;
}

Student::Student(int r,string name,float cgpa)
{
  this->name = name;
  this->rollNo = r;
  this->cgpa = cgpa;
}

Student::Student(const Student &stud)
{
   name = stud.name;
   rollNo=stud.rollNo;
   cgpa = stud.cgpa;
}

Student::~Student()
{
  name="";
  rollNo=0;
  cgpa=0;
}

void Student::dispDetails()
{
  cout<<" Name: "<<name<<endl;
  cout<<" Rollno: "<<rollNo<<endl;
  cout<<"CGPA: "<<cgpa<<endl;
}
void Student::operator=(Student s)
{
        name=s.name;
        rollNo=s.rollNo;
        cgpa=s.cgpa;
}

TreeNode::TreeNode()
{
  left=NULL; right=NULL;
}

TreeNode::TreeNode(Student* S,TreeNode *l,TreeNode *r)
{
  s=S;
  left=l;
  right=r;
}

Student * TreeNode::getStudent(TreeNode *temp)
{
  return temp->s;
}

BST::BST()
{
  root=NULL;
}

bool BST::isEmpty()
{
  if(root==NULL)
     return true;
  else
     return false;
}

TreeNode * BST::getRoot()
{
  return root;
}

bool BST::insert(TreeNode *temp,TreeNode *newNode)
{
  if(root==NULL)
  {
     root=newNode; return true;
  }
  else
  {
     if(temp->s->rollNo < newNode->s->rollNo)
     {
        if(temp->right==NULL)
       {
           temp->right=newNode; return true;
        }
        else
           insert(temp->right,newNode);
      }
      else if(temp->s->rollNo > newNode->s->rollNo)
     {
     if(temp->left==NULL)
    {
        temp->left=newNode; return true;
     }
     else
        insert(temp->left,newNode);
   }
   else
      return false;
  }
}

TreeNode * BST::search(TreeNode *temp,int r)
{
  if(temp == NULL || temp->s->rollNo==r)
     return temp;
  else if(temp->s->rollNo <r)
      search(temp->right,r);
  else if(temp->s->rollNo >r)
      search(temp->left,r);
}

TreeNode * BST::findMin(TreeNode *temp)
{
   if(temp->left!=NULL)
      findMin(temp->left);
   else
      return temp;
}

TreeNode * BST::findMax(TreeNode *temp)
{
   if(temp->right!=NULL)
       findMax(temp->right);
   else
       return temp;
}

Student * BST::deletecgpa(int r)
{
  TreeNode *parent = NULL; TreeNode *temp=root; while(temp!=NULL)
  {
     if(temp->s->rollNo==r)
    {
       Student *delElt=temp->s;
       if(temp->left==NULL && temp->right==NULL)
      {
          if(temp==root)
          {
             delete temp; temp=NULL;
              root=NULL;
              return delElt;
          }
          else
         {
         if(parent->left == temp)
             parent->left=NULL;
         else
             parent->right=NULL;
          delete temp;
          temp=NULL;
          return delElt;
       }
   }
   else if(temp->left!=NULL && temp->right!=NULL)
  {
      TreeNode *temp1=temp->right;
      if(temp1->left==NULL)
      {
         temp->s=temp1->s;
         temp->right=temp1->right;
         delete temp1;
         temp1=NULL;
      }
      else
     {
         while(temp1->left!=NULL)
         {
             parent=temp1;
             temp1=temp1->left;
         }
         temp->s=temp1->s;
         if(temp1->right!=NULL)
            parent->left=temp1->right;
         else
             parent->left=NULL;
        delete temp1;
        temp1=NULL;
     }
     return delElt;
  }
  else
  {
   if(temp==root)
  {
     if(temp->left!=NULL && temp->right==NULL)
         root=temp->left;
     else
         root=temp->right;
      delete temp;
      temp=NULL;
      return delElt;
  }
  else
  {
     if(parent->right==temp)
    {
        if(temp->right!=NULL && temp->left==NULL)
           parent->right=temp->right;
        else
            parent->right=temp->left;
    }
    else
   {
       if(temp->left!=NULL && temp->right==NULL)
           parent->left=temp->left;
       else
           parent->left=temp->right;
   }
   delete temp; temp=NULL;
   return delElt;
 }
 }
}
else if(temp->s->rollNo > r)
{
  parent=temp;
  temp=temp->left;
}
else if(temp->s->rollNo < r)
{
  parent=temp;
  temp=temp->right;
}
}
}

void BST::preOrder(TreeNode *temp)
{
  if(temp!=NULL)
  {
     temp->s->dispDetails();
     preOrder(temp->left);
     preOrder(temp->right);
  }
}

void BST::inOrder(TreeNode *temp)
{
   if(temp!=NULL)
   {
       inOrder(temp->left);
       temp->s->dispDetails();
       inOrder(temp->right);
   }
}

void BST::postOrder(TreeNode *temp)
{
  if(temp!=NULL)
  {
     postOrder(temp->left); postOrder(temp->right);
     temp->s->dispDetails();
   }
}
[19bcs150@mepcolinux ex6new]$cat app.cpp
#include"head.h"
int main()
{
  string name;
  int rollNo,ch,c=1;
  float cgpa;
  BST t;
  cout<<"\n       BINARY SERACH TREE      ";
  while(c!=0)
  {
     cout<<"\n       ";
     cout<<"\n Enter 1 to add a student.\n Enter 2 to search a student.\n Enter 3 to find minimum.";
     cout<<"\n Enter 4 to find maximum.\n Enter 5 to delete student.";
     cout<<"\n Enter 6 to display student details (inOrder).\n Enter 7 to display student details (preOrder).";
     cout<<"\n Enter 8 to display student details (postOrder).\n Enter 9 to exit.";
     cout<<"\n       ";
     cout<<"\n Enter your choice : "; cin>>ch;
     switch(ch)
    {
       case 1:
       {
           cout<<" Enter the name of the Student : ";
           cin>>name;
           cout<<" Enter Roll number : "; cin>>rollNo;
           cout<<" Enter the CGPA : "; cin>>cgpa;
           Student* s=new Student(rollNo,name,cgpa);
           TreeNode *newNode=new TreeNode(s,NULL,NULL);
           TreeNode *temp=t.getRoot();
           int flag; flag=t.insert(temp,newNode);
           if(flag==1)
               cout<<"\n Insertion successfull.";
           else
               cout<<"\n Insertion not successfull.";
           break;
       }
       case 2:
       {
          int r;
          cout<<"\n Enter the Roll number of the student to be searched : ";
          cin>>r;
          cout<<"\n";
          TreeNode *temp=t.getRoot();
          if(temp!=NULL)
          {
             TreeNode *temp1=t.search(temp,r);
             if(temp1!=NULL)
             {
                 Student *s=temp1->getStudent(temp1);
                 s->dispDetails();
             }
             else
                 cout<<"\n Student not present.";
          }
         else
             cout<<"\n Tree is Empty.."; break;
         }
        case 3:
        {
             TreeNode *temp=t.getRoot();
             if(temp!=NULL)
             {
                TreeNode *temp1=t.findMin(temp);
                Student *s=temp1->getStudent(temp1);
                s->dispDetails();
             }
             else
                 cout<<"\n Tree is empty.";
             break;
          }
         case 4:
         {
             TreeNode *temp=t.getRoot();
             if(temp!=NULL)
             {
                 TreeNode *temp1=t.findMax(temp);
                 Student *s=temp1->getStudent(temp1);
                 s->dispDetails();
             }
             else
                 cout<<"\n Tree is empty.";
             break;
          }
          case 5:
          {
             int r;
             cout<<"\n Enter the roll number of the student to be deleted :";
             cin>>r;
             TreeNode *temp=t.getRoot();
             if(t.search(temp,r)!=NULL)
            {
                Student *temp1=t.deletecgpa(r);
                cout<<"\n Deletion is successfull";
                cout<<"\n Deleted Element is : ";
                temp1->dispDetails();
             }
             else
                  cout<<"\n Student not present";
             break;
         }
         case 6:
         {
             TreeNode *temp=new TreeNode();
             temp=t.getRoot();
             if(temp!=NULL)
             {
                 t.inOrder(temp);
             }
            else
                cout<<"\n Tree is empty.";
            break;
         }
         case 7:
         {
             TreeNode *temp=new TreeNode();
             temp=t.getRoot();
             if(temp!=NULL)
            {
                t.preOrder(temp);
             }
             else
                  cout<<"\n Tree is empty.";
            break;
         }
         case 8:
         {
              TreeNode *temp=new TreeNode();
              temp=t.getRoot();
              if(temp!=NULL)
             {
                t.postOrder(temp);
              }
             else
                 cout<<"\n Tree is empty.";
             break;
         }
         case 9:
                 exit(0);
         default:
               cout<<"\n Enter a valid option.";
      }
   }
       return 0;
}
[19bcs150@mepcolinux ex6new]$cat makefile
exe6.exe:app.o imp.o
        g++ app.o imp.o -o exe6.exe
app.o:app.cpp
        g++ -c app.cpp
imp.o:imp.cpp
        g++ -c imp.cpp

[19bcs150@mepcolinux ex6new]$./exe6.exe

       BINARY SERACH TREE

 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 1
 Enter the name of the Student : Guna
 Enter Roll number : 123
 Enter the CGPA : 8.3

 Insertion successfull.

 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 1
 Enter the name of the Student : Mani
 Enter Roll number : 124
 Enter the CGPA : 8.5

 Insertion successfull.

 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 1
 Enter the name of the Student : Jet
 Enter Roll number : 126
 Enter the CGPA : 9.3

 Insertion successfull.

 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 2

 Enter the Roll number of the student to be searched : 126

 Name: Jet
 Rollno: 126
CGPA: 9.3


 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 3
 Name: Guna
 Rollno: 123
CGPA: 8.3


 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 4
 Name: Jet
 Rollno: 126
CGPA: 9.3


 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 6
 Name: Guna
 Rollno: 123
CGPA: 8.3
 Name: Mani
 Rollno: 124
CGPA: 8.5
 Name: Jet
 Rollno: 126
CGPA: 9.3


 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 7
 Name: Guna
 Rollno: 123
CGPA: 8.3
 Name: Mani
 Rollno: 124
CGPA: 8.5
 Name: Jet
 Rollno: 126
CGPA: 9.3


 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 8
 Name: Jet
 Rollno: 126
CGPA: 9.3
 Name: Mani
 Rollno: 124
CGPA: 8.5
 Name: Guna
 Rollno: 123
CGPA: 8.3


 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 5

 Enter the roll number of the student to be deleted :123

 Deletion is successfull
 Deleted Element is :  Name: Guna
 Rollno: 123
CGPA: 8.3


 Enter 1 to add a student.
 Enter 2 to search a student.
 Enter 3 to find minimum.
 Enter 4 to find maximum.
 Enter 5 to delete student.
 Enter 6 to display student details (inOrder).
 Enter 7 to display student details (preOrder).
 Enter 8 to display student details (postOrder).
 Enter 9 to exit.

 Enter your choice : 9
[19bcs150@mepcolinux ex6new]$exit
exit

Script done on Mon 22 Feb 2021 03:21:00 PM IST
