Script started on Fri 19 Feb 2021 09:47:05 PM IST
[19bcs150@mepcolinux ex7]$cat avl.h
class Student
{
  char name[20];
  int ID;
  float cgpa;
  friend class AVL;
  friend class AvlNode;
  public:
    Student();
    Student(char*,int,float);
    Student(const Student&);
    void dispDetails();
};


class AvlNode
{
  public:
      AvlNode();
      AvlNode(char*,int,float);
      Student * getStudent(AvlNode *);
      int getId(AvlNode *);
  private:
      Student *b;
      AvlNode *left;
      AvlNode *right;
      int height;
      friend class AVL;
};

class AVL
{
   public:
        AVL();
        ~AVL();
        AvlNode * getRoot();
        int getBalance(AvlNode *);
        int findHeight(AvlNode *);
        void updateRoot(AvlNode *);
        AvlNode * LLRotate(AvlNode *);
        AvlNode * RRRotate(AvlNode *);
        AvlNode * LRRotate(AvlNode *);
        AvlNode * RLRotate(AvlNode *);
        AvlNode * insert(AvlNode *,AvlNode*);
        AvlNode * search(AvlNode *,int);
        void inOrder(AvlNode *);
        void preOrder(AvlNode *);
        void postOrder(AvlNode *);
 private:
        AvlNode *root;
};
[19bcs150@mepcolinux ex7]$cat avlimp.cpp
#include"avl.h"
#include<iostream>
#include<stdlib.h>
#include<string.h>
using namespace std;
Student::Student()
{
  strcpy(name,"null");
  ID=0;
  cgpa=0;
}

Student::Student(char*d,int n,float f)
{
  strcpy(name,d);
  cgpa = f;
  ID=n;
}

Student::Student(const Student &f)
{
  strcpy(name,f.name);
  ID=f.ID;
  cgpa=f.cgpa;
}

void Student::dispDetails()
{
 cout<<ID<<" \t "<<name<<"\t"<<cgpa<<"\n";
}

AvlNode :: AvlNode()
{
 left=NULL;
 right=NULL;
 height=0;
}
AvlNode :: AvlNode(char* name,int ID,float f)
{
 b=new Student(name,ID,f);
 left=NULL;
 right=NULL;
 height=0;
}

Student * AvlNode :: getStudent(AvlNode *temp)
{
 return temp->b;
}

int AvlNode::getId(AvlNode *temp)
{
 return temp->b->ID;
}

AVL::AVL()
{
 root=NULL;
}

AVL::~AVL()
{
 root=NULL;
}

int AVL::findHeight(AvlNode *myNode)
{
 if(myNode==NULL)
        return -1;
 return myNode->height;
}

int AVL::getBalance(AvlNode *myNode)
{
 if(myNode==NULL)
        return -1;
 return findHeight(myNode->left)-findHeight(myNode->right);
}

AvlNode * AVL ::getRoot()
{
 return root;
}

void AVL::updateRoot(AvlNode *newRoot)
{
 root=newRoot;
}

AvlNode * AVL::LLRotate(AvlNode *k3)
{
 AvlNode *k2=k3->left;
 AvlNode *temp=k2->right;
 k2->right=k3;
 k3->left=temp;
 k3->height=max(findHeight(k3->left),findHeight(k3->right))+1;
 k2->height=max(findHeight(k2->left),findHeight(k2->right))+1;
 return k2;
}
AvlNode * AVL::RRRotate(AvlNode *k1)
{
  AvlNode *k2=k1->right;
  AvlNode *temp=k2->left;
  k2->left=k1;
  k1->right=temp;
  k1->height=max(findHeight(k1->left),findHeight(k1->right))+1;
  k2->height=max(findHeight(k2->left),findHeight(k2->right))+1;
  return k2;
}

AvlNode * AVL::LRRotate(AvlNode *k3)
{
  k3->left=RRRotate(k3->left);
  return LLRotate(k3);
}

AvlNode * AVL::RLRotate(AvlNode *k1)
{
  k1->right=RRRotate(k1->right);
  return RRRotate(k1);
}
void AVL::preOrder(AvlNode *temp)
{
  if(temp!=NULL)
  {
    temp->b->dispDetails();
    preOrder(temp->left);
    preOrder(temp->right);
  }
}

void AVL::inOrder(AvlNode *temp)
{
  if(temp!=NULL)
  {
   inOrder(temp->left);
   temp->b->dispDetails();
   inOrder(temp->right);
  }
}

void AVL::postOrder(AvlNode *temp)
{
  if(temp!=NULL)
  {
    postOrder(temp->left);
    postOrder(temp->right);
    temp->b->dispDetails();
  }
}

AvlNode * AVL :: insert(AvlNode *temp,AvlNode *newNode)
{
  if(temp==NULL)
  {
    root=newNode;
    cout<<"\n Insertion successful.";
    return root;
  }
  else if (temp->b->ID > newNode->b->ID)
  {
    if(temp->left==NULL)
    {
        temp->left=newNode;
        cout<<"\n Insertion successful.";
    }
    else
       temp->left=insert(temp->left,newNode);
  }
  else if(temp->b->ID < newNode->b->ID)
  {
    if(temp->right==NULL)
    {
        temp->right=newNode;
        cout<<"\n Insertion successful.";
    }
  else
        temp->right=insert(temp->right,newNode);
 }
 else
        cout<<"\n Insertion is not successful.";
temp->height=max(findHeight(temp->left),findHeight(temp->right))+1;
 int balance = getBalance(temp);
 if(balance > 1)
 {
  if(newNode->b->ID < temp->left->b->ID)
        return LLRotate(temp);
  else
        return LRRotate(temp);
 }
 if(balance < -1)
 {
  if(newNode->b->ID > temp->right->b->ID)
        return RRRotate(temp);
  else
        return RLRotate(temp);
 }
 return temp;
}
AvlNode * AVL::search(AvlNode *temp,int id)
{
 if(temp == NULL || temp->b->ID==id)
        return temp;
 else if(temp->b->ID < id)
        search(temp->right,id);
 else if(temp->b->ID > id)
        search(temp->left,id);
}
[19bcs150@mepcolinux ex7]$cat avlapp.cpp
#include"avl.h"
#include<iostream>
#include<stdlib.h>
#include<string.h>
using namespace std;
int main()
{
 char name[20];
 int ID;
 float f;
 AVL t;
 int ch,t1=1;
 while(t1!=0)
 {
  cout<<"\n1. Insert an Student detail.";
  cout<<"\n2. Search an Student";
  cout<<"\n3. Display the Student details.(Inorder)";
  cout<<"\n4. Display the Student details.(Preorder)";
  cout<<"\n5. Display the Student details.(Postorder)";
  cout<<"\n6. Exit.";
  cout<<"\nEnter your choice : ";
  cin>>ch;
  switch(ch)
  {
     case 1:
        {
          cout<<"\nEnter the name of the Student: ";
          cin>>name;
          cout<<"Enter ID : ";
          cin>>ID ;
          cout<<"Enter CGPA : ";
          cin>>f;
          AvlNode *newNode=new
          AvlNode(name,ID,f);
          AvlNode *temp=t.getRoot();
          AvlNode *temp1=t.insert(temp,newNode);
          t.updateRoot(temp1);
          break;
        }
        case 2:
        {
          int id;
          cout<<"\n Enter the id of Student the to  searched : ";
          cin>>id;
          AvlNode *temp=t.getRoot();
          if(temp!=NULL)
          {
            AvlNode *temp1=t.search(temp,id);
            if(temp1!=NULL)
            {
              Student *b=temp1->getStudent(temp1);
              cout<<"\n ID   Name\tCGPA \n";
              b->dispDetails();
            }
            else
                cout<<"\n Student details not present.";
          }
          else
            cout<<"\n Tree is Empty.";
          break;
         }
         case 3:
         {
           AvlNode *temp=new AvlNode();
           temp=t.getRoot();
           if(temp!=NULL)
           {
             cout<<"\n ID   Name\tCGPA\n";
             t.inOrder(temp);
           }
           else
             cout<<"\n Tree is empty.";
           break;
         }
         case 4:
         {
           AvlNode *temp=new AvlNode();
           temp=t.getRoot();
           if(temp!=NULL)
           {
             cout<<"\n ID  Name\tCGPA\n";
             t.preOrder(temp);
           }
           else
             cout<<"\n Tree is empty.";
           break;
         }
         case 5:
         {
           AvlNode *temp=new AvlNode();
           temp=t.getRoot();
           if(temp!=NULL)
           {
             cout<<"\n ID   Name\tCGPA\n";
             t.postOrder(temp);
           }
           else
             cout<<"\n Tree is empty.";
           break;
         }
         case 6:
                exit(0);
  }
 }
 return 0;
}
[19bcs150@mepcolinux ex7]$cat makefile
avl.exe: avlimp.o avlapp.o
        g++ -o avl.exe avlimp.o avlapp.o
avlimp.o: avlimp.cpp
        g++ -c avlimp.cpp
avlapp.o: avlapp.cpp
        g++ -c avlapp.cpp
[19bcs150@mepcolinux ex7]$make
make: `avl.exe' is up to date.
[19bcs150@mepcolinux ex7]$ 

[19bcs150@mepcolinux ex7]$./avl.exe

1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 1

Enter the name of the Student: Raja
Enter ID : 123
Enter CGPA : 8.3

 Insertion successful.
1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 1

Enter the name of the Student: Mani
Enter ID : 124
Enter CGPA : 7.8

 Insertion successful.
1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 12

1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 1

Enter the name of the Student: Edward
Enter ID : 126
Enter CGPA : 9.3

 Insertion successful.
1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 2

 Enter the id of Student the to  searched : 124

 ID   Name        CGPA
124      Mani   7.8

1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 3

 ID   Name        CGPA
123      Raja   8.3
124      Mani   7.8
126      Edward 9.3

1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 4

 ID  Name         CGPA
124      Mani   7.8
123      Raja   8.3
126      Edward 9.3

1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 5

 ID   Name        CGPA
123      Raja   8.3
126      Edward 9.3
124      Mani   7.8

1. Insert an Student detail.
2. Search an Student
3. Display the Student details.(Inorder)
4. Display the Student details.(Preorder)
5. Display the Student details.(Postorder)
6. Exit.
Enter your choice : 6

[19bcs150@mepcolinux ex7]$exit
exit

Script done on Fri 19 Feb 2021 09:47:10 PM IST
