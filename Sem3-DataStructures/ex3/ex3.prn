Script started on Fri 19 Feb 2021 12:25:39 AM IST
[19bcs150@mepcolinux ex3]$cat A_Stack.h
#include <string>
using namespace std;
class Student
{
  string name;
  int rollNo;
  float cgpa;
  public:
    Student();
    Student(string,int,float);
    Student operator=(Student);
    Student operator=(int);
    friend istream& operator>>(istream&,Student&);
    friend ostream& operator<<(ostream&,Student&);
};

class A_Stack
{
  Student *stackArr;
  int capacity;
  int top;
  public:
    A_Stack();
    A_Stack(Student*,int,int);
    A_Stack(const A_Stack&);
    ~A_Stack();
    int push(Student);
    Student pop();
    Student peak();
    int isFull();
    int isEmpty();
    int displayStack();
    int makeStackEmpty();
};
[19bcs150@mepcolinux ex3]$cat A_Stackimp.cpp
#include<iostream>
using namespace std;
#include"A_Stack.h"
Student :: Student()
{
  name = "NULL";
  rollNo = 0;
  cgpa = 0.0;
}

Student :: Student (string nameTemp,int rollNoTemp,float cgpaTemp)
{
  name = nameTemp;
  rollNo = rollNoTemp;
  cgpa = cgpaTemp;
}

Student Student :: operator=(Student temp)
{
  name = temp.name;
  rollNo = temp.rollNo;
  cgpa = temp.cgpa;
  return *this;
}

Student Student :: operator=(int temp)
{
  name = "NULL";
  rollNo = temp;
  cgpa = temp*0.1;
  return *this;
}

ostream& operator<<(ostream& myout,Student &temp)
{
  myout<<"\nName : "<<temp.name;
  myout<<"\nRollNo : "<<temp.rollNo;
  myout<<"\nCGPA : "<<temp.cgpa<<"\n";
  return myout;
}

istream& operator>>(istream& myin,Student &temp)
{
  cout<<"Enter name: ";
  myin>>temp.name;
  cout<<"Enter rollNo: ";
  myin>>temp.rollNo;
  cout<<"Enter CGPA: ";
  myin>>temp.cgpa;
  return myin;
}

A_Stack :: A_Stack()
{
  top = -1;
  capacity = 5;
  stackArr = new Student[capacity];
  for(int i = 0;i < 5;i++)
    stackArr[i] = -1;
}

A_Stack :: A_Stack(Student* a,int t,int c)
{
  top = t;
  capacity = c;
  stackArr = new Student[capacity];
  for(int i = 0;i <= top;i++)
     stackArr[i] = a[i];
  for(int i = top+1;i < capacity;i++)
     stackArr[i] = -1;
}

A_Stack :: A_Stack(const A_Stack &ref)
{
  top = ref.top;
  capacity = ref.capacity;
  stackArr = new Student[capacity];
  for(int i = 0;i <= top;i++)
    stackArr[i] = ref.stackArr[i];
  for(int i = top + 1;i < capacity;i++)
    stackArr[i] = -1;
}

A_Stack :: ~A_Stack()
{
  top = -1;
  capacity = 0;
  delete [] stackArr;
  stackArr = NULL;
}

int A_Stack :: isFull()
{
  if(top + 1 == capacity)
    return 1;//Stack is full
  else
    return 0;//Stack is not full
}

int A_Stack :: isEmpty()
{
  if(top == -1)
    return 1;//Stack is empty
  else
     return 0;//Stack is not empty
}

int A_Stack :: push(Student x)
{
  if(!isFull())
  {
    top++;
    stackArr[top] = x;
    return 1;
  }
  else
    return 0;
}

Student A_Stack :: pop()
{
  Student deletedElt = stackArr[top];
  stackArr[top] = -1;
  top--;
  return deletedElt;
}

int A_Stack :: displayStack()
{
  if(!isEmpty())
  {
    for(int i = top;i >= 0 ;i--)
    {
      cout<<stackArr[i];
    }
    cout<<"\n";
    return 1;
 }
 else
   return 0;
}

int A_Stack :: makeStackEmpty()
{
  while(!isEmpty())
    Student deletedElt = pop();
  return 1;
}

Student A_Stack :: peak()
{
  return stackArr[top];
}

[19bcs150@mepcolinux ex3]$cat A_Stackapp.cpp
#include "A_Stack.h"
#include <iostream>
using namespace std;
int main()
{
  int ch,top,temp,capacity;
  Student ele1;
  cout<<"\n\t~~~~~ Student details Management";
  cout<<" System in Stack Data structure using Arrays~~~~\n";
  cout<<"\nEnter the max no of student details U like to insert: ";
  cin>>capacity;
  cout<<"\nEnter how many students details you like to insert now: ";
  cin>>temp;
  top=temp-1;
  cout<<"\n";
  Student ele[capacity];
  for(int i = 0;i < top + 1;i++)
  {
    cout<<"\nEnter Student "<<i+1<<" details:\n";
    cin>>ele[i];
  }
  A_Stack a(ele,top,capacity);
  while(1)
  {
    cout<<"\n\nMenu:\n";
    cout<<"\n1.Insert a student detail";
    cout<<"\n2.Delete the recently uploaded student's details";
    cout<<"\n3.Display the recently uploaded student's details";
    cout<<"\n4.Display all student's details";
    cout<<"\n5.Delete all uploaded details";
    cout<<"\n6.Exit\n";
    cout<<"\nEnter your choice: ";
    cin>>ch;
    switch(ch)
    {
      case 1:
      {
        cout<<"\nEnter student details:\n";
        cin>>ele1;
        if(a.push(ele1))
          cout<<"\n Student detail is successfully uploaded\n";
        else
        {
          cout<<"\n Insertion operation is failed. Because, stack is full\n";
        }
        break;
      }
      case 2:
      {
        cout<<"\nThe below Student detail is poped out from the stack\n";
        Student p = a.pop();
        cout<<p;
        break;
      }
      case 3:
      {
        cout<<"\nRecently added student's details:\n";
        Student s1 = a.peak();
        cout<<s1;
        break;
      }
      case 4:
      {
         cout<<"\n----------------------------";
         cout<<"\n Uploaded student details\n";
         cout<<"----------------------------\n";
         a.displayStack();
         break;
      }
      case 5:
      {
        a.makeStackEmpty();
        cout<<"\n All the uploaded student details are successfully deleted\n";
        break;
      }
      case 6: return 0;
    }
  }
}
[19bcs150@mepcolinux ex3]$cat makefile
exe3.exe:A_Stackapp.o A_Stackimp.o
        g++ A_Stackapp.o A_Stackimp.o -o exe3.exe
A_Stackapp.o:A_Stackapp.cpp
        g++ -c A_Stackapp.cpp
A_Stackimp.o:A_Stackimp.cpp
        g++ -c A_Stackimp.cpp
[19bcs150@mepcolinux ex3]$make
make: `exe3.exe' is up to date.

[19bcs150@mepcolinux ex3]$[19bcs150@mepcolinux ex3]$./exe3.exe

        ~~~~~ Student details Management System in Stack Data structure using Arrays~~~~

Enter the max no of student details U like to insert: 8

Enter how many students details you like to insert now: 3


Enter Student 1 details:
Enter name: Yogesh
Enter rollNo: 123
Enter CGPA: 9

Enter Student 2 details:
Enter name: Edward
Enter rollNo: 213
Enter CGPA: 98

Enter Student 3 details:
Enter name: Mani
Enter rollNo: 124
Enter CGPA: 9.3


Menu:

1.Insert a student detail
2.Delete the recently uploaded student's details
3.Display the recently uploaded student's details
4.Display all student's details
5.Delete all uploaded details
6.Exit

Enter your choice: 1

Enter student details:
Enter name: Ravi
Enter rollNo: 129
Enter CGPA: 8.3

 Student detail is successfully uploaded


Menu:

1.Insert a student detail
2.Delete the recently uploaded student's details
3.Display the recently uploaded student's details
4.Display all student's details
5.Delete all uploaded details
6.Exit

Enter your choice: 3

Recently added student's details:

Name : Ravi
RollNo : 129
CGPA : 8.3


Menu:

1.Insert a student detail
2.Delete the recently uploaded student's details
3.Display the recently uploaded student's details
4.Display all student's details
5.Delete all uploaded details
6.Exit

Enter your choice: 2

The below Student detail is poped out from the stack

Name : Ravi
RollNo : 129
CGPA : 8.3


Menu:

1.Insert a student detail
2.Delete the recently uploaded student's details
3.Display the recently uploaded student's details
4.Display all student's details
5.Delete all uploaded details
6.Exit

Enter your choice: 4

----------------------------
 Uploaded student details
----------------------------

Name : Mani
RollNo : 124
CGPA : 9.3

Name : Edward
RollNo : 213
CGPA : 98

Name : Yogesh
RollNo : 123
CGPA : 9



Menu:

1.Insert a student detail
2.Delete the recently uploaded student's details
3.Display the recently uploaded student's details
4.Display all student's details
5.Delete all uploaded details
6.Exit

Enter your choice: 5

 All the uploaded student details are successfully deleted


Menu:

1.Insert a student detail
2.Delete the recently uploaded student's details
3.Display the recently uploaded student's details
4.Display all student's details
5.Delete all uploaded details
6.Exit

Enter your choice: 6

[19bcs150@mepcolinux ex3]$exit
exit

Script done on Fri 19 Feb 2021 12:25:43 AM IST
