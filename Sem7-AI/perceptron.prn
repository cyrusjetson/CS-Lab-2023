Script started on Fri 28 Oct 2022 02:38:47 PM IST

[19bcs150@mepcolinux exe7]cat perceptron1.py
def perceptron ( data , target , weights , bias , learning_rate , theta , epoch ):
  count = 0
  while count < epoch:
    print ( "Epoch:" , count+1 )
    print("x1\tx2\tx3\tx4\tyin\ty\ttarget\tw1\tw2\tw3\tw4\tb\tdw1\tdw2\tdw3\tdw4\tdb")
    print("\n")
    okay = True
    for index , sample in enumerate ( data ):
      yin = sum ( [ x * weights [ index1 ] for index1 , x in enumerate ( sample ) ] ) + bias
      y = activation_function ( yin , theta )
      if ( y != target [ index ] ):
        okay = False
        weights , bias, dw, db = new_weights ( weights , bias , sample , target [ index ] , y , learning_rate )
      print ("{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}".format(sample[0],sample[1],sample[2],sample[3],yin,y,target[index],weights[0],weights[1],weights[2],weights[3],bias,dw[0],dw[1],dw[2],dw[3],db))
    count += 1
    if ( okay ):
      break
  return weights , bias

def new_weights ( old_weights , old_bias ,  sample , actual , predicted , learning_rate ):
  dw = []
  error = actual - predicted
  new_bias = old_bias + learning_rate * error
  new_weights = [ old_weight + learning_rate * sample [ index ] * error for index , old_weight in enumerate ( old_weights ) ]
  for i in range(4):
    dw.append(new_weights[i] - old_weights[i])
  db = new_bias - old_bias
  # print ( new_bias , new_weights )
  return new_weights , new_bias , dw, db

def activation_function ( yin , theta ):
  if ( yin > theta ):
    return 1
  elif ( yin < -theta ):
    return -1
  else:
   return 0

def prediction ( sample , weights , bias , theta ):
  yin = sum ( [ x * weights [ index1 ] for index1 , x in enumerate ( sample ) ] ) + bias
  return activation_function ( yin , theta )

data = [ [1,1,1,1] , [-1,1,-1,-1] , [1,1,1,-1] , [1,-1,-1,1] ]
target = [ 1 , 1 , -1 , -1 ]
weights = [ 0 , 0 , 0 , 0 ]
theta = 0.2
learning_rate = 1
bias = 0
epoch = 3
final_weights , final_bias = perceptron ( data , target , weights , bias , learning_rate , theta , epoch )
[19bcs146@mepcolinux exe7]python3 perceptron1.py
output:

Epoch: 1
x1      x2      x3      x4      yin     y       target  w1      w2      w3      w4      b       dw1     dw2     dw3     dw4     db


1       1       1       1       0       0       1       1       1       1       1       1       1       1       1       1       1
-1      1       -1      -1      -1      -1      1       -1      3       -1      -1      3       -2      2       -2      -2      2
1       1       1       -1      5       1       -1      -3      1       -3      1       1       -2      -2      -2      2       -2
1       -1      -1      1       1       1       -1      -5      3       -1      -1      -1      -2      2       2       -2      -2

Epoch: 2
x1      x2      x3      x4      yin     y       target  w1      w2      w3      w4      b       dw1     dw2     dw3     dw4     db


1       1       1       1       -5      -1      1       -3      5       1       1       1       2       2       2       2       2
-1      1       -1      -1      7       1       1       -3      5       1       1       1       2       2       2       2       2
1       1       1       -1      3       1       -1      -5      3       -1      3       -1      -2      -2      -2      2       -2
1       -1      -1      1       -5      -1      -1      -5      3       -1      3       -1      -2      -2      -2      2       -2

Epoch: 3
x1      x2      x3      x4      yin     y       target  w1      w2      w3      w4      b       dw1     dw2     dw3     dw4     db


1       1       1       1       -1      -1      1       -3      5       1       5       1       2       2       2       2       2
-1      1       -1      -1      3       1       1       -3      5       1       5       1       2       2       2       2       2
1       1       1       -1      -1      -1      -1      -3      5       1       5       1       2       2       2       2       2
1       -1      -1      1       -3      -1      -1      -3      5       1       5       1       2       2       2       2       2

[19bcs150@mepcolinux exe7]cat perceptron2.py
def perceptron ( data , target , weights , bias , learning_rate , theta , epoch ):
    count = 0
    while count < epoch:
        okay = True
        print ( "\nEpoch " , count + 1 )
        print("x1\tx2\tyin\ty\ttarget\tw1\tw2\tb\tdw1\tdw2\tdb")
        for index , sample in enumerate ( data ):
            yin = sum ( [ x * weights [ index1 ] for index1 , x in enumerate ( sample ) ] ) + bias
            y = activation_function ( yin , theta )
            if ( y != target [ index ] ):
                okay = False
                weights , bias, dw, db= new_weights ( weights , bias , sample , target [ index ] , y , learning_rate )
            print ("{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}".format (sample[0],sample[1],round(yin,1),round(y,1),target[index],round(weights [0],1),round(weights [1],1),round(bias,1),round(dw[0],1),round(dw[1],1),round(db,1) ))
        count +=1
        if ( okay ):
          break
    return weights , bias

def new_weights ( old_weights , old_bias ,  sample , actual , predicted , learning_rate ):
  dw=[]
  error = actual - predicted
  new_bias = old_bias + learning_rate * error
  new_weights = [ old_weight + learning_rate * sample [ index ] * error for index , old_weight in enumerate ( old_weights ) ]
  for i in range(2):
    dw.append(new_weights[i] - old_weights[i])
  db = new_bias - old_bias
  return new_weights , new_bias, dw, db

def activation_function ( yin , theta ):
  if ( yin > theta ):
    return 1
  elif ( yin < theta ):
    return -1
  else:
   return 0

def prediction ( sample , weights , bias , theta ):
  yin = sum ( [ x * weights [ index1 ] for index1 , x in enumerate ( sample ) ] ) + bias
  return activation_function ( yin , theta )

data = [[0,0],[0,1],[1,0],[1,1]]
target = [0,0,0,1]
weights = [0.3,-0.2]
learning_rate = 0.2
theta = 0.4
bias = 1


epoch = 2
final_weights , final_bias = perceptron ( data , target , weights , bias , learning_rate , theta , epoch )
[19bcs146@mepcolinux exe7]python3 perceptron2.py
output:

Epoch  1
x1      x2      yin     y       target  w1      w2      b       dw1     dw2     db
0       0       1.0     1       0       0.3     -0.2    0.8     0.0     0.0     -0.2
0       1       0.6     1       0       0.3     -0.4    0.6     0.0     -0.2    -0.2
1       0       0.9     1       0       0.1     -0.4    0.4     -0.2    0.0     -0.2
1       1       0.1     -1      1       0.5     0.0     0.8     0.4     0.4     0.4

Epoch  2
x1      x2      yin     y       target  w1      w2      b       dw1     dw2     db
0       0       0.8     1       0       0.5     0.0     0.6     0.0     0.0     -0.2
0       1       0.6     1       0       0.5     -0.2    0.4     0.0     -0.2    -0.2
1       0       0.9     1       0       0.3     -0.2    0.2     -0.2    0.0     -0.2
1       1       0.3     -1      1       0.7     0.2     0.6     0.4     0.4     0.4

[19bcs150@mepcolinux ex7]$exit
exit

Script done on Fri 28 Oct 2022 02:38:52 PM IST
