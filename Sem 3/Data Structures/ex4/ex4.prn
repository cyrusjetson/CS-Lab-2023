Script started on Fri 19 Feb 2021 12:38:27 AM IST
[19bcs150@mepcolinux ex4]$cat A_Queue.h
#include <string>
using namespace std;
class Student
{
  string name;
  int rollNo;
  float cgpa;
  public:
    Student();
    Student(string,int,float);
    Student operator=(Student);
    Student operator=(int);
    friend istream& operator>>(istream&,Student&);
    friend ostream& operator<<(ostream&,Student&);
};

class A_Queue
{
  Student *queueArr;
  int capacity;
  int front;
  int rear;
  public:
    A_Queue();
    A_Queue(Student*,int,int,int);
    A_Queue(const A_Queue&);
    ~A_Queue();
    int enqueue(Student);
    Student dequeue();
    Student peak();
    Student recent();
    int isFull();
    int isEmpty();
    int size();
    int displayQueue();
    int makeQueueEmpty();
};
[19bcs150@mepcolinux ex4]$cat A_Queueimp.cpp
#include <iostream>
using namespace std;
#include "A_Queue.h"
Student :: Student()
{
  name = "NULL";
  rollNo = 0;
  cgpa = 0.0;
}

Student :: Student (string tempName,int roll,float tempCgpa)
{
  name = tempName;
  rollNo = roll;
  cgpa = tempCgpa;
}

Student Student :: operator=(Student x)
{
  name = x.name;
  rollNo = x.rollNo;
  cgpa = x.cgpa;
  return *this;
}

Student Student :: operator=(int x)
{
  name = "NULL";
  rollNo = x;
  cgpa = 0;
  return *this;
}

ostream& operator<<(ostream& myout,Student &p)
{
  myout<<"\nName : "<<p.name;
  myout<<"\nRollNo : "<<p.rollNo;
  myout<<"\nCGPA : "<<p.cgpa;
  return myout;
}

istream& operator>>(istream& myin,Student &p)
{
  cout<<"Enter name: ";
  myin>>p.name;
  cout<<"Enter rollNo: ";
  myin>>p.rollNo;
  cout<<"Enter cgpa: ";
  myin>>p.cgpa;
  return myin;
}

A_Queue :: A_Queue()
{
  front = -1;
  rear = -1;
  capacity = 5;
  queueArr = new Student[capacity];
  for(int i = 0;i < 5;i++)
    queueArr[i] = -1;
}

A_Queue :: A_Queue(Student* a,int r,int s,int c)
{
  rear = r -1;
  front = s;
  capacity = c;
  queueArr = new Student[capacity];
  for(int i = 0;i <= rear;i++)
   queueArr[i] = a[i];
  for(int i = rear + 1;i < capacity;i++)
   queueArr[i] = -1;
}

A_Queue :: A_Queue(const A_Queue &ref)
{
  rear = ref.rear;
  front = ref.front;
  capacity = ref.capacity;
  queueArr = new Student[capacity];
  for(int i = 0;i <= rear;i++)
    queueArr[i] = ref.queueArr[i];
  for(int i = rear + 1;i < capacity;i++)
    queueArr[i] = -1;
}

A_Queue :: ~A_Queue()
{
  front = -1;
  rear = -1;
  capacity = 0;
  delete [] queueArr;
  queueArr = NULL;
}

int A_Queue :: isFull()
{
  if((rear+1)%capacity==front)
    return 1;//Queue is full
  else
   return 0;//Queue is not full
}

int A_Queue :: isEmpty()
{
  if((front == -1 && rear == -1) ||(front > rear))
    return 1;//Queue is empty
  else
    return 0;//Queue is not empty
}

int A_Queue :: enqueue(Student x)
{
  if(!isFull())
  {
    if(front == -1 && rear == -1)
    {
      front = 0;
      rear = 0;
      queueArr[rear] = x;
    }
    else
    {
      rear=(rear+1)%capacity;
      queueArr[rear] = x;
      cout<<"\nhai\n";
    }
    return 1;
  }
  else
    return 0;
}

Student A_Queue :: dequeue()
{
  if(!isEmpty())
  {
    Student deletedElt = queueArr[front];
    if(front == rear)
    {
      front = -1;
      rear = -1;
    }
    else
    {
      front=(front+1)%capacity;
    }
    return deletedElt;
  }
}

int A_Queue :: displayQueue()
{
  int j=0;
  if(!isEmpty())
  {
    int i = front;
    cout<<"Student details:\n";
    while(i!=rear)
    {
      j=j+1;
      cout<<"\nStudent "<<j<<" details:\n";
      cout<<queueArr[i]<<"\n";
      i=(i+1)%capacity;
    }
    cout<<"\nStudent "<<j+1<<" details:\n";
    cout<<queueArr[i];
    cout<<"\n";
    return 1;
  }
  else
     cout<<"\n Queue is empty\n";
  return 0;
}

int A_Queue :: makeQueueEmpty()
{
  while(!isEmpty())
  {
    Student deletedElt = dequeue();
  }
  return 1;
}

Student A_Queue :: peak()
{
  if(!isEmpty())
  {
    return queueArr[front];
  }
}

Student A_Queue :: recent()
{
  if(!isEmpty())
  {
    return queueArr[rear];
  }
}

int A_Queue :: size()
{
  if(!isEmpty())
  {
    int i = front;
    int count = 0;
    while(i!=rear)
    {
      count++;
      i=(i+1)%capacity;
    }
    count++;
    return count;
  }
  else
    return 0;
}

[19bcs150@mepcolinux ex4]$cat A_Queueapp.cpp
#include "A_Queue.h"
#include <iostream>
using namespace std;
int main()
{
  int ch,rear,capacity,temp;
  int front=0;
  Student ele1;
  cout<<"\n\t~~~~~~ Student Details Management System Using Circular ";
  cout<<"Queue ADT using arrays Data Structure ~~~~~~\n\n";
  cout<<"Enter max no of student details you like to store: ";
  cin>>capacity;
  cout<<"\nEnter how many student details you like to insert now: ";
  cin>>temp;
  rear=temp;
  cout<<"\n";
  Student ele[capacity];
  for(int i = 0;i < temp;i++)
  {
    cout<<"\nEnter student "<<i+1<<" details:\n";
    cin>>ele[i];
  }
  A_Queue a(ele,rear,front,capacity);
  while(1)
  {
    cout<<"\n\n\tMenu:\n";
    cout<<"\n1.Insert new student detail";
    cout<<"\n2.Delete very first uploaded student's details";
    cout<<"\n3.Show the first Student detail in Queue";
    cout<<"\n4.Number of available student details";
    cout<<"\n5.Display all student details";
    cout<<"\n6.Delete all student details";
    cout<<"\n7.Display the recently added student detail";
    cout<<"\n8.Exit\n";
    cout<<"\nEnter your choice:";
    cin>>ch;
    switch(ch)
    {
      case 1:
      {
        cout<<"\nEnter student details to perform Enqueue operation:\n";
        cin>>ele1;
        if(a.enqueue(ele1)==1)
          cout<<"\n Student details is sucessfully pushed into the queue\n";
       else
       {
          cout<<"\n Insertion is failed. Because Queue is full\n";
       }
       break;
     }

     case 2:
     {
       cout<<"\nThe below Student detail is poped out\n";
       Student p = a.dequeue();
       cout<<p;
       break;
     }
     case 3:
     {
       cout<<"\nFirst student detail in the Queue is,\n";
       Student p1 = a.peak();
       cout<<p1;
       break;
     }
     case 4:
     {
       cout<<"\nQueue has "<<a.size()<<" Student details";
       break;
     }

     case 5:
     {
       cout<<"\n-----------------------------";
       cout<<"\n\tStudent Details\n";
       cout<<"-----------------------------\n";
       a.displayQueue();
       break;
     }
     case 6:
     {
       cout<<"\n None of the student details are available in Queue\n";
       a.makeQueueEmpty();
       break;
     }
     case 7:
     {
       cout<<"Recently added student's detail:\n";
       Student p1 =a.recent();
       cout<<p1;
       break;
     }
     case 8:return 0;
   }
 }
}

[19bcs150@mepcolinux ex4]$cat makefile
exe4.exe:A_Queueapp.o A_Queueimp.o
        g++ A_Queueapp.o A_Queueimp.o -o exe4.exe
A_Queueapp.o:A_Queueapp.cpp
        g++ -c A_Queueapp.cpp
A_Queueimp.o:A_Queueimp.cpp
        g++ -c A_Queueimp.cpp
[19bcs150@mepcolinux ex4]$./exe4.exe

        ~~~~~~ Student Details Management System Using Circular Queue ADT using arrays Data Structure ~~~~~~

Enter max no of student details you like to store: 8

Enter how many student details you like to insert now: 3


Enter student 1 details:
Enter name: Ravi
Enter rollNo: 123
Enter cgpa: 9.2

Enter student 2 details:
Enter name: Mani
Enter rollNo: 124
Enter cgpa: 9.3

Enter student 3 details:
Enter name: Edward
Enter rollNo: 125
Enter cgpa: 8.2


        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:1

Enter student details to perform Enqueue operation:
Enter name: Hari
Enter rollNo: 128
Enter cgpa: 7.3

hai

 Student details is sucessfully pushed into the queue


        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:2

The below Student detail is poped out

Name : Ravi
RollNo : 123
CGPA : 9.2

        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:3

First student detail in the Queue is,

Name : Mani
RollNo : 124
CGPA : 9.3

        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:4

Queue has 3 Student details

        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:5

-----------------------------
        Student Details
-----------------------------
Student details:

Student 1 details:

Name : Mani
RollNo : 124
CGPA : 9.3

Student 2 details:

Name : Edward
RollNo : 125
CGPA : 8.2

Student 3 details:

Name : Hari
RollNo : 128
CGPA : 7.3


        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:7
Recently added student's detail:

Name : Hari
RollNo : 128
CGPA : 7.3

        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:6

 None of the student details are available in Queue


        Menu:

1.Insert new student detail
2.Delete very first uploaded student's details
3.Show the first Student detail in Queue
4.Number of available student details
5.Display all student details
6.Delete all student details
7.Display the recently added student detail
8.Exit

Enter your choice:8

[19bcs150@mepcolinux ex4]$exit
exit

Script done on Fri 19 Feb 2021 12:38:31 AM IST
