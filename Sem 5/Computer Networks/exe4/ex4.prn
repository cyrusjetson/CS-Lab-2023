Script started on Sun 10 Oct 2021 10:29:40 PM IST

//  ~~~~ Echo ~~~~

[19bcs150@mepcolinux client]$cat client.c
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<string.h>
#include<unistd.h>
#include<sys/socket.h>
int main()
{
   struct sockaddr_in ccin;
   int i=0;
   char buf[30];
   int ccid = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
   if(ccid == -1)
       printf("Socket Failure \n");
   else
   {
      ccin.sin_family=AF_INET;
      ccin.sin_port=htons(30150);
      ccin.sin_addr.s_addr=inet_addr("127.0.0.1");
      printf("socket created\n");
      int cnct=connect(ccid,(struct sockaddr * ) &ccin, sizeof(ccin));
      if(cnct == -1)
         printf("Connection failed\n");
      else
      {
         printf("Connection successful\n");
         char sent_msg[30];
         while(1)
         {
             printf("Message : ");
             scanf("%s",&sent_msg);
             if(strcmp(sent_msg,"Bye")==0)
                  break;
             int snt = send(ccid,sent_msg,sizeof(sent_msg),0);
            if(snt == -1)
                printf("Message not transmitted\n");
             int resv=recv(ccid,buf,30,0);
             if(resv == -1)
                 printf("Message not recieved\n");
             else
                 printf("Echo : %s \n",buf);
         }
       }
       int status = close(ccid);
       if(status == 0)
          printf("closed\n");
   }
}

[19bcs150@mepcolinux server]$cat server.c
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<string.h>
#include<unistd.h>
#include<sys/socket.h>

int main()
{
   struct sockaddr_in cin;
   struct sockaddr_in ccin;
   int cid,n,byte;
   char echobuf[32],buf[32];
   int m,i=0;
   cid = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
   if(cid == -1)
       perror("Socket Not Created");
   else
   {
       printf("Socket Successful\n");
       cin.sin_family = AF_INET;
       cin.sin_port=htons(30150);
       cin.sin_addr.s_addr=inet_addr("127.0.0.1");
       if(bind(cid,(struct sockaddr *) &cin ,sizeof(cin)) == -1 )
       {
            printf("Binding Failure\n");
       }else
       {
            printf("Binding successful\n");
            int listen1=listen(cid,0);
            if(listen1 == -1){
                 printf("Listening Failure....\n");
            }else
            {
                 printf("Listening\n");
                 int n=sizeof(ccin);
                  int asid = accept(cid,(struct sockaddr *) &ccin , &n);
                 if(asid == -1)
                    printf("Accept failed\n");
                 else
                 {
                    printf("Accepted    ");
                   while(1){
                        int resv = recv(asid,buf,30,0);
                        if(resv == -1)
                            printf("connection closed\n");
                        printf("%s\n",buf);
                        int snt=send(asid,buf,30,0);
                    }
                }
             }
        }
   }
}

// Output

[19bcs150@mepcolinux server]$./a.out
Socket Successful
Binding successful
Listening
Accepted    hi
hai
hello
hello
hello

[19bcs150@mepcolinux client]$./a.out
socket created
Connection successful
Message : hi
Echo : hi
Message : hai
Echo : hai
Message : hello
Echo : hello
Message : Bye
closed


// ~~~~ FTP ~~~~~

[19bcs150@mepcolinux server]$cat hai.txt
Jetson Cyrus
19bcs150
CSE C
[19bcs150@mepcolinux client]$cat client.c
#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
int main()
{
  int s_id=socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);
  if(s_id==-1)
  {
   printf("\nsocket creation failed program terminated");
   return 0;
  }
  printf("\nsocket created successfully");
  struct sockaddr_in foreign_addr;
  foreign_addr.sin_family=AF_INET;
  foreign_addr.sin_port=htons(30150);
  foreign_addr.sin_addr.s_addr=inet_addr("127.0.0.1");
  int n=sizeof(foreign_addr);
  int status=connect(s_id,(struct sockaddr *)&foreign_addr,n);
  if(status==-1)
  {
    printf("\nconnection unsuccessful program terminated!..");
    return 0;
  }
  char filename[50];
  printf("\nEnter the file name: ");
  scanf("%s",filename);
  int count=send(s_id,filename,sizeof(filename),0);
  if(count==-1)
  {
   printf("\nrequest unsuccessful program terminated!");
   return 0;
  }
  printf("\nRequest for %s is successful",filename);
  printf("\nEnter the name to the file received : ");
  scanf("%s",filename);
  FILE *ptr=fopen(filename,"w");
  char buffer[2048];
  count=recv(s_id,buffer,sizeof(buffer),0);
  if(count==-1)
  {
          printf("\nfile recemption failed program terminated");
          return 0;
  }
  else if(!strcmp(buffer,"File Not Found"))
  {
          printf("\nServer throws error message as:\n%s\nfor your file request\n",buffer);
          return 0;
  }
  while(strcmp(buffer,"Bye")!=0)
  {
          fputs(buffer,ptr);
          count=recv(s_id,buffer,sizeof(buffer),0);
          if(count==-1)
          {
                  printf("\nfile recemption failed intermediately program terminated\n");
                  return 0;
          }
  }
  printf("\nfile received successfully\n");
}

[19bcs150@mepcolinux server]$cat server.c
#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#define size 2048
int main()
{
  int s_id=socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);
  if(s_id==-1)
  {
   printf("\nsocket creation failed.. program terminated..");
   return 0;
  }
  printf("\nsocket created successfully");
  struct sockaddr_in addrport;
  addrport.sin_family=AF_INET;
  addrport.sin_port=htons(30150);
  addrport.sin_addr.s_addr=inet_addr("127.0.0.1");
  int status=bind(s_id,(struct sockaddr*)&addrport,sizeof(addrport));
  if(status==-1)
  {
   printf("\nbinding unsuccessful..program terminated");
   return 0;
  }
  printf("\nbinded successfully");
  status=listen(s_id,0);
  if(status==-1)
  {
   printf("\nlistening unsuccessful..program terminated");
   return 0;
  }
  printf("\nlistening..");
  struct sockaddr client_addr;
  int n=sizeof(client_addr);
  status=accept(s_id,&client_addr,&n);
  if(status==-1)
  {
    printf("\ncannot accept program terminated");
    return 0;
  }
  printf("connection request accepted");
  char filename[50];
  int count=recv(status,filename,sizeof(filename),0);
  if(count==-1)
  {
          printf("\nData request unsuccessful..program terminated");
          return 0;
  }
  printf("\nRequested file %s from client",filename);
  FILE *ptr;
  ptr=fopen(filename,"r");
  if(ptr==NULL)
  {
     char errorMessage[50];
     strcpy(errorMessage,"File Not Found");
     count=send(status,errorMessage,sizeof(errorMessage),0);
     if(count==-1)
     {
        printf("\nError while sending error ,program terminated");
        return 0;
     }
     printf("\nError");
     return 0;
  }

  printf("\nsending in progress");
  char stream[size];
  while(fgets(stream,size,ptr))
  {
         count=send(status,stream,sizeof(stream),0);
         if(count==-1)
         {
           printf("\nsend operation failed intermediately..program terminated");
           return 0;
         }
  }
  char bye[4]={'B','y','e'};
  if(send(status,bye,sizeof(bye),0)==-1)
  {
    printf("\nfile sent but failure in closing program terminated");
    return 0;
  }
  printf("\nfile sent successfully");
  close(status);
}

// ~~~~ ----- Output ----- ~~~~

[19bcs150@mepcolinux server]$./a.out

socket created successfully
binded successfully
listening..connection request accepted
Requested file hai.txt from client
sending in progress
file sent successfully

[19bcs150@mepcolinux client]$./a.out

socket created successfully
Enter the file name: hai.txt

Request for hai.txt is successful
Enter the name to the file received : hai1.txt

file received successfully

[19bcs150@mepcolinux server]$./a.out

socket created successfully
binded successfully
listening..connection request accepted
Requested file hello.txt from client
sending in progress
Error

[19bcs150@mepcolinux client]$./a.out

socket created successfully
Enter the file name: hello.txt

Request for hai.txt is successful
File not found

[19bcs150@mepcolinux exe4]$exit
exit

Script done on Sun 10 Oct 2021 10:29:44 PM IST
