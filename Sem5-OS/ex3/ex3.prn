Script started on Thu 21 Oct 2021 09:03:48 PM IST
[19bcs150@mepcolinux ex3]$cat ex3.c
#include <stdio.h>
#include <stdlib.h>
void final_output (int k[][10], int n, int p)
{
  int i, j;
  for (i = 0; i < n; i++)
    {
      printf ("\n");
      for (j = 0; j < p; j++)
        {
          printf ("%d\t", k[i][j]);
        }
    }
}

//Banker's Algorithm

void Banker (int A[][10], int N[][10], int M[10][10], int W[1][10], int *n, int *m)
{
  int i, j;
  printf ("\nEnter total number of processes : ");
  scanf ("%d", n);
  printf ("\nEnter total number of resources : ");
  scanf ("%d", m);
  for (i = 0; i < *n; i++)
    {
      printf ("\nProcess %d\n", i + 1);
      for (j = 0; j < *m; j++)
        {
          printf ("Allocation for resource %d : ", j + 1);
          scanf ("%d", &A[i][j]);
          printf ("Maximum for resource %d : ", j + 1);
          scanf ("%d", &M[i][j]);
        }
    }
  printf ("\nAvailable resources : \n");
  for (i = 0; i < *m; i++)
    {
      printf ("Resource %d : ", i + 1);
      scanf ("%d", &W[0][i]);
    }

  for (i = 0; i < *n; i++)
    for (j = 0; j < *m; j++)
      N[i][j] = M[i][j] - A[i][j];

   printf ("\nAllocation Matrix");
   final_output (A, *n, *m);
  printf ("\nMaximum Matrix");
  final_output (M, *n, *m);
  printf ("\nNeed Matrix");
  final_output (N, *n, *m);
}

//Safety algorithm

int safety (int A[][10], int N[][10], int B[1][10], int n, int m, int a[])
{
  int i, j, k, x = 0, f1 = 0, f2 = 0;
  int F[10], W[1][10];
  for (i = 0; i < n; i++)
    F[i] = 0;
  for (i = 0; i < m; i++)
    W[0][i] = B[0][i];

  for (k = 0; k < n; k++)
    {
      for (i = 0; i < n; i++)
        {
          if (F[i] == 0)
            {
              f2 = 0;
              for (j = 0; j < m; j++)
                {
                  if (N[i][j] > W[0][j])
                    f2 = 1;
                }
              if (f2 == 0 && F[i] == 0)
                {
                  for (j = 0; j < m; j++)
                    W[0][j] += A[i][j];
                  F[i] = 1;
                  f1++;
                  a[x++] = i;
                }
            }
        }
      if (f1 == n)
        return 1;
    }
  return 0;
}

//Resource Request algorithm

void request (int A[10][10], int N[10][10], int B[10][10], int pid, int K)
{
  int rmat[1][10];
  int i;
  printf ("\n Enter additional request : \n");
  for (i = 0; i < K; i++)
    {
      printf ("Request for resource %d : ", i + 1);
      scanf ("%d", &rmat[0][i]);
    }

  for (i = 0; i < K; i++)
    if (rmat[0][i] > N[pid][i])
      {
        printf ("\nRequest not granted\n");
        exit (0);
      }

  for (i = 0; i < K; i++)
    if (rmat[0][i] > B[0][i])
      {
        printf ("\nResources unavailable\n");
        exit (0);
      }

  for (i = 0; i < K; i++)
    {
      B[0][i] -= rmat[0][i];
      A[pid][i] += rmat[0][i];
      N[pid][i] -= rmat[0][i];
    }
}

int banker (int A[][10], int N[][10], int W[1][10], int n, int m)
{
  int j, i, a[10];
  j = safety (A, N, W, n, m, a);
  if (j != 0)
    {
      printf ("\n\n");
      printf ("\n A safety sequence has been detected.\n");
      for (i = 0; i < n; i++)
        printf (" P%d ", a[i]);
      printf ("\n");
      return 1;
    }
  else
    {
      printf ("\nDeadlock has occured.\n");
      return 0;
    }
}

int main ()
{
  int All[10][10], Max[10][10], Need[10][10], W[1][10];
  int n, m, pid, c, r;
  printf("\nBankers \n");
  Banker (All, Need, Max, W, &n, &m);
  r = banker (All, Need, W, n, m);
  if (r != 0)
    {
      printf("\n Do you want make an additional request for any of the process ? ( yes = 1 , no = 0) ");
      scanf ("%d", &c);
      if (c == 1)
        {
          printf ("\nEnter process number : ");
          scanf ("%d", &pid);
          request (All, Need, W, pid - 1, m);
          printf("\nRequest accepted\n");
          r = banker (All, Need, W, n, m);
          if (r == 0)
            {
              exit (0);
            }
        }
    }
  else
    exit (0);
  return 0;
}

[19bcs150@mepcolinux ex3]$./a.out

Bankers

Enter total number of processes : 5

Enter total number of resources : 3

Process 1
Allocation for resource 1 : 0
Maximum for resource 1 : 7
Allocation for resource 2 : 1
Maximum for resource 2 : 5
Allocation for resource 3 : 0
Maximum for resource 3 : 3

Process 2
Allocation for resource 1 : 2
Maximum for resource 1 : 3
Allocation for resource 2 : 0
Maximum for resource 2 : 2
Allocation for resource 3 : 0
Maximum for resource 3 : 2

Process 3
Allocation for resource 1 : 3
Maximum for resource 1 : 9
Allocation for resource 2 : 0
Maximum for resource 2 : 0
Allocation for resource 3 : 2
Maximum for resource 3 : 2

Process 4
Allocation for resource 1 : 2
Maximum for resource 1 : 2
Allocation for resource 2 : 1
Maximum for resource 2 : 2
Allocation for resource 3 : 1
Maximum for resource 3 : 2

Process 5
Allocation for resource 1 : 0
Maximum for resource 1 : 4
Allocation for resource 2 : 0
Maximum for resource 2 : 3
Allocation for resource 3 : 2
Maximum for resource 3 : 3

Available resources :
Resource 1 : 3
Resource 2 : 3
Resource 3 : 2

Allocation Matrix
0       1       0
2       0       0
3       0       2
2       1       1
0       0       2
Maximum Matrix
7       5       3
3       2       2
9       0       2
2       2       2
4       3       3
Need Matrix
7       4       3
1       2       2
6       0       0
0       1       1
4       3       1


 A safety sequence has been detected.
 P1  P3  P4  P0  P2

 Do you want make an additional request for any of the process ? ( yes = 1 , no = 0) 1

Enter process number : 1

 Enter additional request :
Request for resource 1 : 1
Request for resource 2 : 0
Request for resource 3 : 0

Request accepted



 A safety sequence has been detected.
 P1  P3  P4  P0  P2
[19bcs150@mepcolinux ex3]$exit
exit

Script done on Thu 21 Oct 2021 09:03:50 PM IST
