Script started on Thu 21 Oct 2021 09:12:16 PM IST
[19bcs150@mepcolinux ex4]$cat ex4.c
#include<stdio.h>
void sort(int a[],int n)
{
    int i,j,temp;
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(a[i]>a[j])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
    }
}
void dsort(int a[],int n)
{
  int i,j,temp;
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(a[i]<a[j])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
    }
}

void firstfit(int temp1[],int a2[],int first[],int n,int m)
{
    int i,j,k=0,l=0;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            if(temp1[j]>a2[i])
            {
                first[k]=temp1[j];
                l+=1;
                temp1[j]=0;
                break;
            }
        }
        if(l==0)
            first[k]=0;
        l=0;
        k=k+1;
    }
}

void bestfit(int temp3[],int temp2[],int a2[],int best[],int n,int m)
{
    int i,j,l=0,p=0,z,w;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            if(temp3[j]>a2[i])
            {
                temp2[p]=temp3[j];
                p+=1;
                l+=1;
            }
        }
        if(l==0)
            best[i]=0;
        else
        {   sort(temp2,n);
            best[i]=temp2[0];
            for(z=0;z<n;z++)
            {
                if(temp2[0]==temp3[z])
                    temp3[z]=0;
            }
            for(w=0;w<n;w++)
                temp2[w]=9999;
        }
        l=0;
        p=0;
    }
}

void worstfit(int temp3[],int temp2[],int a2[],int best[],int n,int m)
{
    int i,j,l=0,p=0,z,w;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            if(temp3[j]>a2[i])
            {
                temp2[p]=temp3[j];
                p+=1;
                l+=1;
            }
        }
        if(l==0)
            best[i]=0;
        else
        {   dsort(temp2,n);
            best[i]=temp2[0];
            for(z=0;z<n;z++)
            {
                if(temp2[0]==temp3[z])
                    temp3[z]=0;
            }
            for(w=0;w<n;w++)
                temp2[w]=0;
        }
        l=0;
        p=0;
    }
}

int main()
{
    int n,i,j,m,k,l=0;
    printf("\nEnter no of blocks: ");
    scanf("%d",&n);
    printf("\nEnter no of processes: ");
    scanf("%d",&m);
    int a1[n];
    int a2[m];
    int first[m];
    int temp1[n];
    int temp2[n];
    int temp3[n];
    int temp4[n];
    int temp5[n];
    int best[m];
    int worst[m];
    int iff[m];
    int ifb[m];
    int ifw[m];
    int finaliff=0,finalifb=0,finalifw=0,eff=0,efb=0,efw=0;

    for(i=0;i<n;i++)
    {
        printf("\nEnter block %d size: ",i+1);
        scanf("%d",&a1[i]);
    }
    for(i=0;i<m;i++)
    {
        printf("\nEnter process %d size: ",i+1);
        scanf("%d",&a2[i]);
    }
    for(i=0;i<n;i++)
        temp1[i]=a1[i];

    firstfit(temp1,a2,first,n,m);

    printf("\n");
    printf("------------------------\n");
    printf("First Fit :\n");
    printf("------------------------\n");
    printf("\nProcess Size \t Block assigned");

    for(i=0;i<m;i++)
    {
        if(first[i]==0)
            printf("\nNot Allocated");
        else
            printf("\n P(%d) \t %d kb \t",a2[i],first[i]);
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<m;j++)
        {
            if(first[i]==0)
                iff[i]=0;
            else
                iff[i]=first[i]-a2[i];
        }
    }
    for(i=0;i<m;i++)
        finaliff+=iff[i];
    for(i=0;i<n;i++)
        eff+=temp1[i];

    printf("\n");
    printf("\nInternal Fragmentation : %d\n",finaliff);
    printf("\nExternal Fragmentation : %d\n",eff);

    for(i=0;i<n;i++)
        temp2[i]=9999;
    for(i=0;i<n;i++)
        temp3[i]=a1[i];
    bestfit(temp3,temp2,a2,best,n,m);

    printf("\n");
    printf("-----------------------\n");
    printf("Best Fit :\n");
    printf("-----------------------\n");
    printf("\nProcess Size \t Block assigned");

    for(i=0;i<m;i++)
    {
        if(best[i]==0)
            printf("\nNot Allocated");
        else
            printf("\n P(%d) \t %d kb",a2[i],best[i]);
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<m;j++)
        {
            if(best[i]==0)
                ifb[i]=0;
            else
                ifb[i]=best[i]-a2[i];
        }
    }
    for(i=0;i<m;i++)
        finalifb+=ifb[i];
    for(i=0;i<n;i++)
        efb+=temp3[i];

    printf("\n");
    printf("\nInternal Fragmentation : %d",finalifb);
    printf("\nExternal Fragmentation : %d",efb);
    for(i=0;i<n;i++)
        temp4[i]=0;
    for(i=0;i<n;i++)
        temp5[i]=a1[i];
    worstfit(temp5,temp4,a2,worst,n,m);

    printf("\n");
    printf("---------------------\n");
    printf("Worst Fit :\n");
    printf("---------------------\n");
    printf("\nProcess Size \t Block assigned");
    for(i=0;i<m;i++)
    {
        if(worst[i]==0)
            printf("\nNot Allocated");
        else
            printf("\n P(%d) \t %d kb\t",a2[i],worst[i]);
    }
    for(i=0;i<m;i++)
    {
        for(j=0;j<m;j++)
        {
            if(worst[i]==0)
                ifw[i]=0;
            else
                ifw[i]=worst[i]-a2[i];
        }
    }
    for(i=0;i<m;i++)
        finalifw+=ifw[i];
    for(i=0;i<n;i++)
        efw+=temp5[i];

    printf("\n");
    printf("\nInternal Fragmentation : %d\n",finalifw);
    printf("\nExternal Fragmentation : %d\n",efw);
    printf("\n");

    return 0;
}


[19bcs150@mepcolinux ex4]$./a.out

Enter no of blocks: 5

Enter no of processes: 4

Enter block 1 size: 100

Enter block 2 size: 50

Enter block 3 size: 200

Enter block 4 size: 300

Enter block 5 size: 600

Enter process 1 size: 212

Enter process 2 size: 417

Enter process 3 size: 112

Enter process 4 size: 426

------------------------
First Fit :
------------------------

Process Size     Block assigned
 P(212)          300 kb
 P(417)          600 kb
 P(112)          200 kb
Not Allocated

Internal Fragmentation : 359

External Fragmentation : 150

-----------------------
Best Fit :
-----------------------

Process Size     Block assigned
 P(212)          300 kb
 P(417)          600 kb
 P(112)          200 kb
Not Allocated

Internal Fragmentation : 359
External Fragmentation : 150
---------------------
Worst Fit :
---------------------

Process Size     Block assigned
 P(212)          600 kb
Not Allocated
 P(112)          300 kb
Not Allocated

Internal Fragmentation : 576

External Fragmentation : 350

[19bcs150@mepcolinux ex4]$exit
exit

Script done on Thu 21 Oct 2021 09:12:22 PM IST
